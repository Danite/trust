var searchIndex = JSON.parse('{\
"trust":{"doc":"","t":"ADLLMLLLLLLMLLMLLLL","n":["tensor","Tensor","borrow","borrow_mut","data","fmt","from","index","into","new","reshape","shape","slice","squeeze","strides","try_from","try_into","type_id","unsqueeze"],"q":[[0,"trust"],[1,"trust::tensor"]],"d":["","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new Tensor with the given data and shape.","Reshapes the tensor to the specified shape.","","Extracts a sub-tensor based on specified start and end …","Removes dimensions of size one from the tensor’s shape.","","","","","Adds a dimension of size one at the specified position in …"],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],0,[[1,2],3],[[]],[[1,[5,[4]]]],[[]],[[[7,[6]],[7,[4]]],1],[[1,[7,[4]]],[[9,[1,8]]]],0,[[1,[5,[4]],[5,[4]]],[[9,[1,8]]]],[1,1],0,[[],9],[[],9],[[],10],[[1,4],[[9,[1,8]]]]],"c":[],"p":[[3,"Tensor"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"slice"],[15,"f32"],[3,"Vec"],[3,"String"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
